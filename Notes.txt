WHAT IS TYPESCRIPT
 TypeScript was a programming language developed by microsoft to
 address the shortcomings of JavaScript.

 TypeScript is built on top of the standard JavaScript
 Every valid JavaScript file is supported by TypeScript

 Benefits of TypeScript (JavaScript with type checking):
    - Static typing
        + knowing the type of a variable
    - Code completion
    - Refactoring
    - Shorthand notations

TypeScript is full stack

Draw backs of TypeScript:
    - Compilation of TypeScript
        + Transpilation is the compiler taking the TS file and compiling it 
          to a JavaScript file.
    - Disiplined in coding

SETTING UP THE DEVELOPMENT ENVIRONMENT
1 Get node
2 npm install typeScript
    brew install typeScript
3 check for TypeScript installation
    tsc -v
4 Vsc code

YOUR FIRST TYPESCRIPT PROGRAM (typeScript compiler standard uses JS (ES5))
- fileName.TS file
- let Vname: Datatype = 20;
- init terms:
    + let
    + const
    + var
- Datatype:
    + Number
    + string 
    + Any 
    + boolean
    + null
    + undefined
    + object
    + unknown
    + never
    + enum
    + tuple
    + Generic
    + Custom

CONFIGURING THE TYPESCRIPT COMPILER
1. go to the directory where your using the typeScript
2. tsc --init
3. in project go to tsconfig.json
4. target will hold the js it will right 
    + clear out the value and do control space to look a valid js version.
5. rootDir will tell you where your generated typeScript files will go
    + create a src directory in your project
    + change rootDir to your src directory (rootDir : "./src")
6. outDir will show where your generated javaScript files will go
    + outDir: "./dist"
7. removeComments should be uncommented and set to true
    + this will insure your generated javaScript will be shorter
8. noEmitOnError should be set to true and uncommented
    + if your code errors out it will not generate any JS file.

* now when you are ready to compile run "tsc" in your project directory via
the command line and all typesScript files in src will be compiled to the JS
files in dist. *


DEBUGGING TYPESCRIPT FILES
- goto tsconfig.json
- enable sourceMap
- create a launch.json file (via Run and Debug menu)
    + select node.js from drop down list
go to launch.json
    + find "program": "${workspaceFolder}/src/index.js"
    + below it put ("preLaunchTask": "tsc: build - tsconfig.json")
goto run and debug menu
    + set a stop point if needed
    + launch program F5
    VARIABLES if you want to watch all variables in your program
    WATCH if you want to declare variables to watch in your program
    
BUILT IN TYPES
- let sales: number = 123_456_789; (large numbers can be seperated with underscores to make more readable)
- let course: string = 'typeScript';
- let is_published: boolean = true;
    + if you initialize with a detectable datatype typeScript will
    be able to infer the type of the data you are storing (best practice
    is still to use the declaration of variables though)
    + if you dont declare a variable though it will assume that it is type any.
        ~ let level; // level will be type any //

THE ANY TYPE VARIABLES
- type any will cover any type of values.
- it can also change data types at any time
    + this goes against the whole reason why you use typeScript
- function Fname(variable: dataType){
    // body of function
}
- to turn off typeScript datatype checker (not recommended)
    1. go to tsconfig.json
    2. go to typechecking section
    3. "strict": true, is the basic type checker
    4. noImplicitAny: true (not recommended, but you can uncomment it and turn it to false)

ARRAYS
- let numbers: number[] = [1, 2, 3];
- if you do not declare what type of array you have it will default to Any
    EX: let numbers = []; // you should avoid but can hold diffrent value types//
numbers.forEach(n => n.toString());
    + numbers is the name of the array
    + .forEach() is a function that loops over the array
    + n is the name of the variable that is in the array
    + => is an arrow function that takes the variable on the left and gets
        the return of the function on the right.

TUPLES
- tuples is a new type in TS it is a fixed length array
- it is commonlly used for a pair of values (they can be diffrent types)
- let variable: [dataType, dataType] = [1 , "foo"];
- you can use intellecense for productivity on elements
- tuplet[0].// a list of intellecense functions will appear //
- once compiled they will convert to regular javaScript arrays
- becareful using push it will work still which is an error but it workspaceFolder
- you can add more than two elements but you loose readablity best practice is to stick to just two elements.

ENUMS
- A list of related constants 
- enum NameOfEnmum { Constant1 = 0, Constant2 = 1, Constant3 = 2};
- all constants will have to have the same data type
        EX: enum NameOfEnmum { Constant1 = 'a', Constant2 = 'b', Constant3 = 'c'};
- to access the values in the enum you can use dot notations
    + let variable: enum = enum.constants;
- using constants enums will produce optimized JS code
    + const enum NameOfEnmum { Constant1 = 0, Constant2 = 1, Constant3 = 2};

FUNCTIONS 
-  function NameOfFunction(parametername: datatype){
    // body of the function //
}
- if you hover over the function name you can view the return type
- BEST PRACTICE IS TO DECLARE YOUR RETURN TYPE
    + EX: function NameOfFunction(parametername: datatype): returnDatatype {
        // body of the function //
    }
- in tsconfig you can uncomment "noUnusedParameters" and it will warn you about them
- in tsconfig you can uncomment "noImplicitReturns" to avoid undefined returns in the JS code
- in tsconfig you can uncomment "noUnusedLocals" and it will warn you about unused variables
- you can make parameters optional by using a '?' or by declaring it in the parameters
    + function NameOfFunction(parametername?: datatype)
    + function NameOfFunction(parametername = 1234) *BEST PRACTICE*

OBJECTS
- let ObjName = { key: datatype, key2: datatype};
- object shapes are not dynamic in TS like in JS
- you can make keys optional again by using the '?'
    + EX: let ObjName = { key?: datatype, key2?: datatype};
- before you make the key optional make sure it conceptually makes sence
  or you might run into logic errors later down the line
- readonly modifier can be used on keys to avoid changing them later.
    + EX: let ObjName = { readonly key: datatype, key2: datatype};
- to attach a method to the object you want to use the arrow method style.
    + EX: let ObjName = {key: datatype, methodname: (parametername: datatype) => returndatatype};


EXAMPLE FOR OBJECT SECTION
let employee: {
    readonly id: number,
    name: string,
    retire: (date: Date) => void
} = {
    id: 1,
    name: 'Hunter',
    retire: (date: Date) => {
        console.log(date);
    }
};

TYPE ALIASES(DRY = DONT REPEAT YOURSELF)
- type TypeName = {
    // porperties and methods
}

UNION TYPES
- variable or function more than one data type
- variable: number | string;
- using dot syntax on a union variable will return the quick methods avalible
  for both types of the variable


INTERSECTION TYPES
- to make a Variable more than one data type at the same time
- let weight: typeAlias & typeAlias;
- an example could be a UIWidget = Draggable & Resizable;


LITERAL TYPES
- to limit the values you can assign to the variable
- let variable: 1 | 2 | 3 | 4 | 5;
- if the variable is assigned to anything else you will get an error
  +    type accountyKeys = '124324145' | '1341551345' | '12341514351';
  +    const customerKey: accountyKeys;


NULLABLE TYPES
- null and undefined types are more often then not not avalible for use in TS
- However against BEST PRACTICE you can turn off the null checker in tsconfig.json
- however if you dont want to do that use union operators to include null and undefined types
- This will help you error trap when nessasary but make sure you write logic around it!

OPTIONAL CHAINING
- optional chaining is just another option to add error checking to your code
- if you worry if something is going to comeback null or undefined, you can use a '?'
- this will be in place of the optional if statements in your code
    EXAMPLE:
        console.log(variable?.property)
            an example for if the variable is possilbly returned null or undefined value
- you can also use the optional chaining operator to make object properties optional
- useage for arrays:
    EX: arrayName?.[0];
- usages for functions:
    EX: functionNAME?.(VARIABLES);

NULLISH COAELSCING OPERATOR
- If you need to fall back to a preffered value (avoiding null and undefined)
    let speed: number | null;
    intake the users input
    speed = UserInput ?? 30;

TYPE ASSERTIONS
- if you have a gaurentteed element and you need to assert that youll use the 'as' keyword
- let variable = ObjName.method("whatever") as AssertedDataType;
OR
- let variable = <AassertedDataType> ObjName.method("whatever");
- this doen't allow you to do type conversion
- understand that id something other than the asserted tyoe is you will get an error
- ?? USE SPARRINGLY ??


THE UNKOWN TYPE
- to avoid using the any type you can use the unknown type
- function FName(variable: unkown){
    // use type Gaurds here to allow the .notation calls (type narrowing)//
    if (typeof variable === "dataType")
}
- preffered over the any type because it forces you to not be lazy and check the type

THE NEVER TYPE
- to avoid using values that never occur in the program
- function Infiniteloop(): never { }
- to get the full value of a never type go to tsconfig and turn allowUnreachableCode into false
- it will warn you its unreachable code

WHAT IS OBJECT ORIENTED PROGRAMMING
- Object have two basic properties
    + Data (state)
    + operations (behavior)
        ~~~~~~~~~~Example~~~~~~~~~~~~~~
        Object Person
        Properties:
            Name
            Email
        Methods:
            Talk()
            Dance()
        ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
- Each object has a single task it takes care of 

*THINK ABOUT TAKING DESIGN PATTERNS AFTER THIS*

CREATING CLASSES
- A class is a blue print for creating objects
- Look at classExample.ts for an example
- note that when you create a the variable in TS they wont exist in your JS code


CREATING OBJECTS
-look at classExample.ts for an example
- when creating a new object you will use the 'new' keyword
- you will the fill in the properties of the object in like arguments of a function
- To test the class and object you can use the following code:
    + 1. Compile the program via tsc in terminal
    + 2. Run the program using node 'node dist/nameOfFile.js'
- Important to remember that you will test via the JS file not the TS file 
- when attempting to Narrow check an object being passed to a function you will
  want to you the instanceof check not the typeof check
        + classExample.ts for an example of this 
    
READ-ONLY AND OPTIONAL PROPERTIES 
- Read-only properties
    +this style of object creation will allow you to more robustly create objects so
     that they are not modified later on 'readonly' properties
- Optional properties
    + this style of object creation will allow you to more robustly create objects so
      that certain properties do not have to be set on the object during creation '?' properties


ACCESS CONTROL KEYWORDS
- access modifiers are to protect your object from being modified in a undesired way
    + public
    + private
    + protected

PARAMETER PROPERTIES
- Not that when making a class instead of creating your object parameter outside of the construcor
  you can do it inside the constructors parameters but you will need to state the access keywords 
  with it as well as any optional properties (such as read-only, optional)
- for an example of this look at the classExample.ts

GETTERS AND SETTERS
- getter and setters are ways to protect your object from being modified but still having the access
  to modify the object with logic as needed
- BEST PRACTICE:
    + best practice is to use getter and setter instead of modifying the object directly as you can add
      reusable logic as needed.

INDEX SIGNATURES
- you cant usually add properties to an object dynamically because typeScript is strict on the shape of objects
  this is where you would use index signature
- the idea would be to add a property that is a custom name that will also point to a custom value
- the way to do this is 
- class ClassName{
    [propertyName: datatype]: propertyThatItWillPointToDataType;
}
- indexSignaturesExample.ts has an example of this

STATIC MEMBERS
- If you need to keep track of a variable across all your objects, you can use a Static
  its important to understand that this variable will not belong to any object but will belong 
  to the class instaed.
- the key word is 'Static'

INHERITANCE
- in heritance is the example of to classes sharing the same properties or methods
- The idea is to create a seperated class that owns the shared properites and have
  the child classes inherit from the parent
- Parent class = Base or Super class
- Child class = Derived or Sub class
- Look at the example in the inheritanceExample.ts file
- The best practice is to have sperate files for each class

METHOD OVERRIDING
- method overriding would be used if you need to slightly modify the method of a parent class to 
  fit the usage of a child class
- an example of this will be in the inheritanceExample.ts file teacher class 
- enable the noImplicitOverrides option in the tsconfig.json file

POLYMORPHISM
- The term refers to the many diffrent forms an object can take form of in the program
- the inheritanceExample.ts has an example of this
- Open Closed Principle:
    + Classes should be open for extension and closed for modification

PRIVATE VS PROTECTED MEMBERS
- private is only accessible from inside the class 
- protected in only accessible from inside the class but is also inheritable to a child

ABSTRACT CLASSES AND METHODS
- abstract classes are used to create child classes to claim full usage of their properties and methods
- not than when pulling to the child classes you will still need to override the methods of the abstract classes
- example in the abstractExample.ts file

INTERFACES
- To define the shape of objects
- Interface Example.ts has an example of this

UNDERSTANDING THE PROBLEM
- The idea here is to generate classes and functions that can be more loosly defined as fare as data types goes
- The Way you would want to use this is to create classes or functions that you would like to use with diffrent data types
- Example in the genericExample.ts file
- avoids you having to use ANY to create params

GENERIC CLASS
- class className<GenericType Parameters> { ... }
- to add multiple generic use <T, K, V> commas to seperat them
- make sure that they can be kind of meaningful

GENERIC FUNCTIONS
- generic function function the same as the classes as far as syntax is concerned
  but change it to function syntax for it.
- Something to think about though is creating a Util class to store all your generic
  functions which will allow you to have them all in one place and having them static
  will allow you to call directly from the class globally


GENERIC INTERFACES
- Generic seem pretty useful for APIs and such things as you could define an interface
  for custom API calls. Also if you knew you were going to pass objects made by the interface
  it allows you to create diffrent kind of child objects from one interface and pass them to 
  a function without defining every single object in your generic

GENERIC CONSTRAINTS
- generic constraints are away for you to get a little more control on the generic usage
  instead of typing out every possible option in you parameters followed by a ? you can use
  contraints.
- genericExample.ts will have an example of this.

EXTENDING GENERIC CLASSES
- examples are on genericExample.ts
- You pass on to make sure that the generic classes are the same type of Generic 
- You extend it to narrow down the generic in the child/sub class
- You fix the generic in the child/sub class to make sure only one type of your generic can 
  be used

THE KEYOF OPERATOR
- the key of operator allow you to keep in mind when your trying to send generics objects through
  a child class key off will allow you to reference the parent class or interface to make sure that
  the only keys that can be passed through are directly linked to the parent object
- Example on KeyOfExample.ts

TYPE MAPPING
- Examples of creating your own are in the typeMapping.ts file
- Alternatively you can google "typescript utility types" to see examples

WHAT ARE DECORATORS
- Decorators are attributes that we apply to classes and their members and we can change how they 
  behave
- type script has no built in decorators so we have to build our own.
- DecoratorExamples.ts has the examples.
- They are functions called by the JavaScript compiler at runtime to change how your classes run and functions
- They can also add properties to your classes as needed.
- To use these you have to turn on "experimentalDecorators" in tsconfig.json 

DECORATORS
- for all decorator examples check DecoratorExamples.ts

MODULES
- modules are important to have because as programs grow you will want to keep your code organized so that it is 
  easy to view and mold
- Each "category" of classes should have its own module or file
- the syntax of importing a module is:
    + import {exportedClassName} from './nameOfFile'
    + if you need to go one file up youll use multiple periods:
        + import {exportedClassName} from '../shapes'

MODULE FORMATS
- note that modules look very diffrent in JS code 
- to get more documentation look up 'Javascript exports and require statements'
- in tsconfig.json under "module" you can see what kind of module generation you are using.
- the common one is the ES2015

DEFAULT EXPORTS (MORE OF A READABLITY THING THAN ANYTHING)
- A module should be like a remote control with very few buttons to use but enough to get the jobs done.
- This is so your dependancies do not go crazy and you can still work with them.
- if you only plan to export one class from a module an idea would be to 'export default' the Object

WILDCARD IMPORTS
- if you import any more than 5 things from another file you should use a wild card import
- the syntax for this is
- import * as nameOfBucket from "./shapes";
- examples of wildcard imports are in the file ModulesExample.ts

RE-EXPORTING
- the idea here is to combine multiple import into one import statement using a file.
- the idea here is to creat a folder (still in the src folder)
- once done with that create a index.ts file in that folder
- now import all your modules into file and export them together via obj notation
        + export {module1,module2}
- now back in your main app or main index.ts file use the regular import statement just to
  the new index.ts file or do a Wildcard import from that new file
- ITS BEST PRACTICE TO ONLY DO THIS WITH MODULES THAT ARE RELATED THAT WAY YOUR BUCKET MAKES SENSE.


REACT WITH TYPESCRIPT
- 